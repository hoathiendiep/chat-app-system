name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy source code to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          source: "chat-app-frontend,chat-app-backend,docker-compose.yaml"
          target: "/home/ec2-user"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            #!/bin/bash
            set -e

            # Verify files
            for dir in chat-app-frontend chat-app-backend docker-compose.yaml; do
              if [ ! -e "/home/ec2-user/$dir" ]; then
                echo "Error: $dir not found"
                exit 1
              fi
            done

            # Create .env
            cat <<EOT > /home/ec2-user/.env
            KC_BOOTSTRAP_ADMIN_USERNAME=admin
            KC_BOOTSTRAP_ADMIN_PASSWORD=${{ secrets.KC_BOOTSTRAP_ADMIN_PASSWORD }}
            KC_DB=postgres
            KC_DB_USERNAME=admin
            KC_DB_PASSWORD=${{ secrets.KC_DB_PASSWORD }}
            POSTGRES_DB=chat-app-system
            ENV_TYPE=dev
            DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/chat-app-system
            DATASOURCE_USERNAME=admin
            DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}
            AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;
            KEYCLOAK_ISSUER_URI=http://${{ secrets.EC2_PUBLIC_IP }}:8080/realms/chatapp-realm
            KEYCLOAK_JWKS_URI=http://${{ secrets.EC2_PUBLIC_IP }}:8080/realms/chatapp-realm/protocol/openid-connect/certs
            FRONT_END_BASE_URL=http://${{ secrets.EC2_PUBLIC_IP }}:4200
            API_URL=http://${{ secrets.EC2_PUBLIC_IP }}:8081/chat-app-api/rs/v1
            KEYCLOAK_URI=http://${{ secrets.EC2_PUBLIC_IP }}:8080
            EOT

            # Install dependencies
            sudo yum update -y
            sudo yum install -y docker git
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user

            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Install Node.js
            curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
            sudo yum install -y nodejs
            node --version

            # Install Java and Maven
            sudo yum install -y java-21-amazon-corretto
            sudo yum install -y maven
            java --version
            mvn --version

            # Build frontend
            cd /home/ec2-user/chat-app-frontend
            npm install
            npm run build

            # Build backend
            cd /home/ec2-user/chat-app-backend
            mvn clean install -DskipTests

            # Build Docker images
            docker build -t chat-app-frontend:latest /home/ec2-user/chat-app-frontend
            docker build -t chat-app-backend:latest /home/ec2-user/chat-app-backend

            # Run Docker Compose
            cd /home/ec2-user
            docker-compose --env-file .env -f docker-compose.yaml pull
            docker-compose --env-file .env -f docker-compose.yaml up -d
            sleep 10
            docker-compose --env-file .env -f docker-compose.yaml ps
            docker logs $(docker ps -q -f name=chat-app-frontend) || true