name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./chat-app-frontend
        run: npm install

      - name: Build frontend
        working-directory: ./chat-app-frontend
        run: npm run build

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install maven -y

      - name: Build backend
        working-directory: ./chat-app-backend
        run: mvn clean install -DskipTests

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend
        working-directory: ./chat-app-backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest

      - name: Build and push frontend
        working-directory: ./chat-app-frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-app-frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-app-frontend:latest

  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          envs: EC2_PUBLIC_IP,KC_BOOTSTRAP_ADMIN_PASSWORD,KC_DB_PASSWORD,DATASOURCE_PASSWORD
          script: |
            #!/bin/bash
            set -e

            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user

            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            mkdir -p /home/ec2-user

            cat <<EOT > /home/ec2-user/.env
            KC_BOOTSTRAP_ADMIN_USERNAME=admin
            KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}
            KC_DB=postgres
            KC_DB_USERNAME=postgres
            KC_DB_PASSWORD=${KC_DB_PASSWORD}
            POSTGRES_DB=chat-app-system
            ENV_TYPE=prod
            DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/chat-app-system
            DATASOURCE_USERNAME=postgres
            DATASOURCE_PASSWORD=${DATASOURCE_PASSWORD}
            AZURE_STORAGE_CONNECTION_STRING="DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;"
            KEYCLOAK_ISSUER_URI=http://${EC2_PUBLIC_IP}:8080/realms/chatapp-realm
            KEYCLOAK_JWKS_URI=http://${EC2_PUBLIC_IP}:8080/realms/chatapp-realm/protocol/openid-connect/certs
            FRONT_END_BASE_URL=http://${EC2_PUBLIC_IP}:4200
            API_URL=http://${EC2_PUBLIC_IP}:8081/chat-app-api/rs/v1
            KEYCLOAK_URI=http://${EC2_PUBLIC_IP}:8080
            ENVIRONMENT=Production
            EOT

            cd /home/ec2-user
            docker-compose down || true
            docker-compose pull
            docker-compose up -d
