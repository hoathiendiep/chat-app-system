name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./chat-app-frontend
        run: npm install

      - name: Build frontend
        working-directory: ./chat-app-frontend
        run: npm run build

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install maven -y

      - name: Build backend
        working-directory: ./chat-app-backend
        run: mvn clean install -DskipTests

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend
        working-directory: ./chat-app-backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest

      - name: Build and push frontend
        working-directory: ./chat-app-frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-app-frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-app-frontend:latest

  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy docker-compose.aws.yaml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose.aws.yaml"
          target: "/home/ec2-user"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            #!/bin/bash
            set -e

            # Verify docker-compose.aws.yaml
            if [ ! -f /home/ec2-user/docker-compose.aws.yaml ]; then
              echo "Error: docker-compose.aws.yaml not found"
              exit 1
            fi

            # Create .env file
            echo "Creating .env file..."
            cat <<EOT > /home/ec2-user/.env
            KC_BOOTSTRAP_ADMIN_USERNAME=admin
            KC_BOOTSTRAP_ADMIN_PASSWORD=${{ secrets.KC_BOOTSTRAP_ADMIN_PASSWORD }}
            KC_DB=postgres
            KC_DB_USERNAME=admin
            KC_DB_PASSWORD=${{ secrets.KC_DB_PASSWORD }}
            POSTGRES_DB=chat-app-system
            ENV_TYPE=dev
            DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/chat-app-system
            DATASOURCE_USERNAME=admin
            DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}
            AZURE_STORAGE_CONNECTION_STRING="DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;"
            KEYCLOAK_ISSUER_URI=http://${{ secrets.EC2_PUBLIC_IP }}:8080/realms/chatapp-realm
            KEYCLOAK_JWKS_URI=http://keycloak:8080/realms/chatapp-realm/protocol/openid-connect/certs
            FRONT_END_BASE_URL=http://${{ secrets.EC2_PUBLIC_IP }}:4200
            API_URL=http://${{ secrets.EC2_PUBLIC_IP }}:8081/chat-app-api/rs/v1
            KEYCLOAK_URI=http://${{ secrets.EC2_PUBLIC_IP }}:8080
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            EOT

            # Verify .env file creation
            if [ ! -f /home/ec2-user/.env ]; then
              echo "Error: Failed to create .env file"
              exit 1
            else
              echo ".env file created successfully"
              echo "Contents of .env:"
              cat /home/ec2-user/.env
            fi

            # Debug: Check DOCKER_USERNAME in .env
            DOCKER_USERNAME=$(grep DOCKER_USERNAME /home/ec2-user/.env | cut -d '=' -f2)
            echo "DOCKER_USERNAME from .env: ${DOCKER_USERNAME}"
            if [ -z "${DOCKER_USERNAME}" ]; then
              echo "Error: DOCKER_USERNAME is empty in .env"
              exit 1
            fi

            # Install dependencies
            echo "Installing dependencies..."
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user

            # Install Docker Compose
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version

            # Run Docker Compose
            cd /home/ec2-user
            echo "Running docker-compose pull..."
            docker-compose --env-file .env -f docker-compose.aws.yaml pull || { echo "docker-compose pull failed"; exit 1; }
            echo "Running docker-compose up..."
            docker-compose --env-file .env -f docker-compose.aws.yaml up -d
            echo "Checking container status..."
            docker-compose --env-file .env -f docker-compose.aws.yaml ps