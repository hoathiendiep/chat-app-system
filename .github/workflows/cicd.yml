name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./chat-app-frontend
        run: npm install

      - name: Build frontend
        working-directory: ./chat-app-frontend
        run: npm run build

      - name: Set up JDK for backend
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Maven
        run: sudo apt-get update && sudo apt-get install maven -y

      - name: Build backend
        working-directory: ./chat-app-backend
        run: mvn clean install -DskipTests

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./chat-app-frontend/dist/chat-app-frontend/browser
          retention-days: 1

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: ./chat-app-backend/target/*.jar
          retention-days: 1

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend Docker image
        working-directory: ./chat-app-backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-app-backend:latest

      - name: Build and push frontend Docker image
        working-directory: ./chat-app-frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-app-frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-app-frontend:latest

  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Deploy to EC2
        env:
          EC2_PUBLIC_URL: http://${{ secrets.EC2_PUBLIC_IP }}
          FRONT_END_BASE_URL: http://${{ secrets.EC2_PUBLIC_IP }}:4200
          API_URL: http://${{ secrets.EC2_PUBLIC_IP }}:8081/chat-app-api/rs/v1
          KEYCLOAK_URI: http://${{ secrets.EC2_PUBLIC_IP }}:8080
          KC_BOOTSTRAP_ADMIN_PASSWORD: ${{ secrets.KC_BOOTSTRAP_ADMIN_PASSWORD }}
          KC_DB_PASSWORD: ${{ secrets.KC_DB_PASSWORD }}
          DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
        run: |
          # Send the deployment command
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=tag:Purpose,Values=ChatApp" \
            --parameters "commands=[
              'set -e',
              'echo \"Starting deployment...\"',
              'sudo yum update -y',
              'sudo amazon-linux-extras install docker -y',
              'sudo yum install docker -y',
              'sudo systemctl start docker',
              'sudo systemctl enable docker',
              'sudo usermod -aG docker ec2-user',
              'sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose',
              'sudo chmod +x /usr/local/bin/docker-compose',
              'mkdir -p /home/ec2-user/',
              'echo \"KC_BOOTSTRAP_ADMIN_USERNAME=admin\" > /home/ec2-user/.env',
              'echo \"KC_BOOTSTRAP_ADMIN_PASSWORD=${{ secrets.KC_BOOTSTRAP_ADMIN_PASSWORD }}\" >> /home/ec2-user/.env',
              'echo \"KC_DB=postgres\" >> /home/ec2-user/.env',
              'echo \"KC_DB_USERNAME=postgres\" >> /home/ec2-user/.env',
              'echo \"KC_DB_PASSWORD=${{ secrets.KC_DB_PASSWORD }}\" >> /home/ec2-user/.env',
              'echo \"POSTGRES_DB=chat-app-system\" >> /home/ec2-user/.env',
              'echo \"ENV_TYPE=prod\" >> /home/ec2-user/.env',
              'echo \"DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/chat-app-system\" >> /home/ec2-user/.env',
              'echo \"DATASOURCE_USERNAME=postgres\" >> /home/ec2-user/.env',
              'echo \"DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}\" >> /home/ec2-user/.env',
              'echo \"AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;\" >> /home/ec2-user/.env',
              'echo \"KEYCLOAK_ISSUER_URI=${{ secrets.EC2_PUBLIC_IP }}:8080/realms/chatapp-realm\" >> /home/ec2-user/.env',
              'echo \"KEYCLOAK_JWKS_URI=${{ secrets.EC2_PUBLIC_IP }}:8080/realms/chatapp-realm/protocol/openid-connect/certs\" >> /home/ec2-user/.env',
              'echo \"FRONT_END_BASE_URL=${{ secrets.EC2_PUBLIC_IP }}:4200\" >> /home/ec2-user/.env',
              'echo \"API_URL=${{ secrets.EC2_PUBLIC_IP }}:8081/chat-app-api/rs/v1\" >> /home/ec2-user/.env',
              'echo \"KEYCLOAK_URI=${{ secrets.EC2_PUBLIC_IP }}:8080\" >> /home/ec2-user/.env',
              'echo \"ENVIRONMENT=Production\" >> /home/ec2-user/.env',
              'echo \"Environment file created successfully\"'
            ]" \
            --comment "Deploy chat app - Install Docker and setup environment" \
            --output text --query 'Command.CommandId')
          
          echo "Command ID: $COMMAND_ID"
          
          # Wait for the command to complete and check status
          echo "Waiting for deployment to complete..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id $(aws ec2 describe-instances \
              --filters "Name=tag:Purpose,Values=ChatApp" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].InstanceId' \
              --output text)
          
          # Check command execution status
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id $(aws ec2 describe-instances \
              --filters "Name=tag:Purpose,Values=ChatApp" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].InstanceId' \
              --output text) \
            --query 'Status' \
            --output text)
          
          if [ "$STATUS" != "Success" ]; then
            echo "Deployment failed with status: $STATUS"
            # Get the error output
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id $(aws ec2 describe-instances \
                --filters "Name=tag:Purpose,Values=ChatApp" "Name=instance-state-name,Values=running" \
                --query 'Reservations[0].Instances[0].InstanceId' \
                --output text) \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi
          
          echo "Docker installation completed successfully!"
      
      # Add this as a separate step for docker-compose deployment
      - name: Deploy Docker Compose Application
        run: |
          # You need to first copy your docker-compose.yaml to the EC2 instance
          # This could be done via S3, copying from repository, etc.
          
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=tag:Purpose,Values=ChatApp" \
            --parameters "commands=[
              'set -e',
              'cd /home/ec2-user/',
              'echo \"Checking if docker-compose.yaml exists...\"',
              'if [ ! -f docker-compose.yaml ]; then echo \"ERROR: docker-compose.yaml not found!\"; exit 1; fi',
              'echo \"Stopping existing containers...\"',
              'sudo /usr/local/bin/docker-compose down || true',
              'echo \"Pulling latest images...\"',
              'sudo /usr/local/bin/docker-compose pull',
              'echo \"Starting containers...\"',
              'sudo /usr/local/bin/docker-compose up -d',
              'echo \"Deployment completed successfully!\"'
            ]" \
            --comment "Deploy chat app - Start containers" \
            --output text --query 'Command.CommandId')
          
          echo "Docker Compose Command ID: $COMMAND_ID"
          
          # Wait and check status
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id $(aws ec2 describe-instances \
              --filters "Name=tag:Purpose,Values=ChatApp" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].InstanceId' \
              --output text)
          
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id $(aws ec2 describe-instances \
              --filters "Name=tag:Purpose,Values=ChatApp" "Name=instance-state-name,Values=running" \
              --query 'Reservations[0].Instances[0].InstanceId' \
              --output text) \
            --query 'Status' \
            --output text)
          
          if [ "$STATUS" != "Success" ]; then
            echo "Docker Compose deployment failed with status: $STATUS"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id $(aws ec2 describe-instances \
                --filters "Name=tag:Purpose,Values=ChatApp" "Name=instance-state-name,Values=running" \
                --query 'Reservations[0].Instances[0].InstanceId' \
                --output text) \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi
          
          echo "Application deployed successfully!"
