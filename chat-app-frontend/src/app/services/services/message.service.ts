/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseListMessageResponse } from '../models/api-response-list-message-response';
import { ApiResponseUnit } from '../models/api-response-unit';
import { ApiResponseUuid } from '../models/api-response-uuid';
import { downloadFile } from '../fn/message/download-file';
import { DownloadFile$Params } from '../fn/message/download-file';
import { getAllMessages } from '../fn/message/get-all-messages';
import { GetAllMessages$Params } from '../fn/message/get-all-messages';
import { saveMessage } from '../fn/message/save-message';
import { SaveMessage$Params } from '../fn/message/save-message';
import { setMessageToSeen } from '../fn/message/set-message-to-seen';
import { SetMessageToSeen$Params } from '../fn/message/set-message-to-seen';
import { uploadMedia } from '../fn/message/upload-media';
import { UploadMedia$Params } from '../fn/message/upload-media';

@Injectable({ providedIn: 'root' })
export class MessageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveMessage()` */
  static readonly SaveMessagePath = '/messages';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveMessage$Response(params: SaveMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseUnit>> {
    return saveMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveMessage(params: SaveMessage$Params, context?: HttpContext): Observable<ApiResponseUnit> {
    return this.saveMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseUnit>): ApiResponseUnit => r.body)
    );
  }

  /** Path part for operation `setMessageToSeen()` */
  static readonly SetMessageToSeenPath = '/messages';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setMessageToSeen()` instead.
   *
   * This method doesn't expect any request body.
   */
  setMessageToSeen$Response(params: SetMessageToSeen$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseUnit>> {
    return setMessageToSeen(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setMessageToSeen$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  setMessageToSeen(params: SetMessageToSeen$Params, context?: HttpContext): Observable<ApiResponseUnit> {
    return this.setMessageToSeen$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseUnit>): ApiResponseUnit => r.body)
    );
  }

  /** Path part for operation `uploadMedia()` */
  static readonly UploadMediaPath = '/messages/upload-media';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadMedia()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadMedia$Response(params: UploadMedia$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseUuid>> {
    return uploadMedia(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadMedia$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadMedia(params: UploadMedia$Params, context?: HttpContext): Observable<ApiResponseUuid> {
    return this.uploadMedia$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseUuid>): ApiResponseUuid => r.body)
    );
  }

  /** Path part for operation `getAllMessages()` */
  static readonly GetAllMessagesPath = '/messages/{chat_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMessages$Response(params: GetAllMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListMessageResponse>> {
    return getAllMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMessages(params: GetAllMessages$Params, context?: HttpContext): Observable<ApiResponseListMessageResponse> {
    return this.getAllMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListMessageResponse>): ApiResponseListMessageResponse => r.body)
    );
  }

  /** Path part for operation `downloadFile()` */
  static readonly DownloadFilePath = '/messages/download-attachment/{message_id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `downloadFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadFile$Response(params: DownloadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return downloadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `downloadFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadFile(params: DownloadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return this.downloadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>) => r)
    );
  }

}
